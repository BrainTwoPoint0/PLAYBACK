name: PLAYScanner Production Collection

on:
  schedule:
    # Every 30 minutes for production stability
    - cron: '*/30 * * * *'
  workflow_dispatch: # Manual trigger
    inputs:
      force_collection:
        description: 'Force collection even if recent data exists'
        required: false
        default: 'false'

jobs:
  collect:
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
      - name: Pre-Collection Health Check
        id: health_check
        run: |
          echo "üîç Checking system health before collection..."

          health_response=$(curl -s https://playbacksports.ai/api/playscanner/health)
          echo "health_response=$health_response" >> $GITHUB_OUTPUT

          # Parse health status
          status=$(echo "$health_response" | jq -r '.status // "unknown"')
          echo "System status: $status"

          if [ "$status" != "healthy" ] && [ "$status" != "degraded" ]; then
            echo "‚ùå System not ready for collection"
            exit 1
          fi

      - name: Smart Collection with Fallback
        id: collection
        continue-on-error: true
        run: |
          echo "üöÄ Starting intelligent data collection..."

          # Attempt collection with sophisticated error handling
          collection_response=$(curl -X POST https://playbacksports.ai/api/playscanner/collect \
            -H "Authorization: Bearer ${{ secrets.PLAYSCANNER_COLLECT_SECRET }}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: PLAYScanner-Production/2.0" \
            --max-time 120 \
            --retry 1 \
            --retry-delay 10 \
            --retry-max-time 180 \
            -w "Status: %{http_code} | Time: %{time_total}s | Size: %{size_download} bytes\n" \
            -s)

          echo "collection_response=$collection_response" >> $GITHUB_OUTPUT

          # Check if collection was successful
          if echo "$collection_response" | grep -q "success\|partial_failure"; then
            echo "‚úÖ Collection completed successfully"
            echo "$collection_response"
          else
            echo "‚ö†Ô∏è Collection may have issues, but continuing..."
            echo "$collection_response"
          fi

      - name: Verify Data Quality
        run: |
          echo "üî¨ Verifying collected data quality..."

          # Test search functionality
          search_response=$(curl -s -X POST https://playbacksports.ai/api/playscanner/search \
            -H "Content-Type: application/json" \
            -d '{"sport":"padel","location":"London","date":"'$(date -d "+1 day" +%Y-%m-%d)'","cached":true}' \
            --max-time 30)

          # Parse results count
          results_count=$(echo "$search_response" | jq -r '.totalResults // 0')
          venues_count=$(echo "$search_response" | jq -r '.results | map(.venue.id) | unique | length // 0')

          echo "üìä Data Quality Metrics:"
          echo "  - Total slots: $results_count"
          echo "  - Unique venues: $venues_count"
          echo "  - Search response time: $(echo "$search_response" | jq -r '.searchTime // "unknown"')ms"

          # Quality thresholds
          if [ "$results_count" -gt 0 ]; then
            echo "‚úÖ Data quality check passed"
          else
            echo "‚ö†Ô∏è Low data quality detected"
          fi

      - name: Performance Analysis
        if: always()
        run: |
          echo "üìà Collection Performance Analysis:"

          # Get detailed health status
          detailed_health=$(curl -s "https://playbacksports.ai/api/playscanner/health?detailed=true")

          echo "Cache Statistics:"
          echo "$detailed_health" | jq -r '.cache.details // "No cache details available"'

          echo "Collection Statistics:"
          echo "$detailed_health" | jq -r '.collection.details.recentCollections[0:3] // "No recent collections"'

          success_rate=$(echo "$detailed_health" | jq -r '.collection.successRate // "unknown"')
          echo "Success Rate: $success_rate"

      - name: Notification on Failure
        if: failure()
        run: |
          echo "üö® Collection workflow failed!"
          echo "This is a notification step - in production, this would:"
          echo "  - Send alerts to monitoring systems"
          echo "  - Post to Slack/Discord channels"  
          echo "  - Create incident tickets"
          echo "  - Trigger fallback data sources"

      - name: Success Summary
        if: success()
        run: |
          echo "üéâ PLAYScanner collection workflow completed successfully!"
          echo "System is operational and collecting data from multiple venues."
